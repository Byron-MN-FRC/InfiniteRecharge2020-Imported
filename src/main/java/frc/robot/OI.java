

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import frc.robot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public JoystickButton btnAcquire;
public JoystickButton btnReverseAcquire;
public JoystickButton btnShiftDown;
public JoystickButton btnShiftUp;
public JoystickButton btnZeroHood;
public JoystickButton btnLimeLightTurn;
public JoystickButton btnReverseIndex;
public JoystickButton btnStopTeleopAutoShoot;
public JoystickButton btnTeleopAutoShoot;
public JoystickButton btnShootMotor;
public Joystick driveJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

driveJoystick = new Joystick(0);

btnShootMotor = new JoystickButton(driveJoystick, 9);
btnShootMotor.whenPressed(new setShootModeOn());
btnTeleopAutoShoot = new JoystickButton(driveJoystick, 1);
btnTeleopAutoShoot.whileHeld(new teleopAutoShootCMD());
btnStopTeleopAutoShoot = new JoystickButton(driveJoystick, 1);
btnStopTeleopAutoShoot.whenReleased(new stopTeleopAutoShoot());
btnReverseIndex = new JoystickButton(driveJoystick, 7);
btnReverseIndex.whileHeld(new indexReverseOne());
btnLimeLightTurn = new JoystickButton(driveJoystick, 2);
btnLimeLightTurn.whenPressed(new LimeLightTurn());
btnZeroHood = new JoystickButton(driveJoystick, 10);
btnZeroHood.whenPressed(new setHoodToZero());
btnShiftUp = new JoystickButton(driveJoystick, 12);
btnShiftUp.whenPressed(new shiftUp());
btnShiftDown = new JoystickButton(driveJoystick, 11);
btnShiftDown.whenPressed(new shiftDown());
btnReverseAcquire = new JoystickButton(driveJoystick, 4);
btnReverseAcquire.whileHeld(new reverseAcquisition());
btnAcquire = new JoystickButton(driveJoystick, 6);
btnAcquire.whileHeld(new startAcquisition());


        // SmartDashboard Buttons
        SmartDashboard.putData("deployLinearSlide", new deployLinearSlide());
        SmartDashboard.putData("releaseWinch", new releaseWinch());
        SmartDashboard.putData("testShootMotor", new testShootMotor());
        SmartDashboard.putData("teleopAutoShootCMD", new teleopAutoShootCMD());
        SmartDashboard.putData("ReleaseBuddyWinchFront", new ReleaseBuddyWinchFront());
        SmartDashboard.putData("ReleaseBuddyWinchBack", new ReleaseBuddyWinchBack());
        SmartDashboard.putData("setHoodToZero", new setHoodToZero());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getDriveJoystick() {
        return driveJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

