// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.commands.indexOneBall;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class BallIndexer extends Subsystem {
    private int indexedBallCount = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX beltMotor;
private DigitalInput indexSensor;
private DigitalInput indexToShootSensor;
private DigitalInput indexAcquiredSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean indexerRunning = false;

    public BallIndexer() {
        // indexSensor = digital port 1
        // indexToShootSensor = digital port 2
        // indexAcquiredSensor = digital port 3
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
beltMotor = new WPI_TalonSRX(11);


        
indexSensor = new DigitalInput(1);
addChild("indexSensor",indexSensor);

        
indexToShootSensor = new DigitalInput(2);
addChild("indexToShootSensor",indexToShootSensor);

        
indexAcquiredSensor = new DigitalInput(3);
addChild("indexAcquiredSensor",indexAcquiredSensor);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        ballPresentAtExit = ballPresent(2);
        ballPresentAtExitPrevious = ballPresentAtExit;

        
    }

    boolean ballPresentAtExitPrevious = false;
    boolean ballArrived = false;
    boolean ballPresentAtExit;

    public boolean shooterActive = false;
    @Override
    public void periodic() {
        // Put code here to be run every loop
        if (ballPresent(0) && !indexerRunning && !shooterActive)  {
            indexOneBall idxCmd = new indexOneBall();
            indexerRunning = true;
            idxCmd.start();
        }

        // The following code watches for balls appearing and leaving,
        // causing the ball count to be decremented.
        ballPresentAtExit = ballPresent(2);

        if (!ballArrived){
            // Test to see if ball has arrived.
            if (ballPresentAtExit && !ballPresentAtExitPrevious){
                ballArrived = true;
            }
        } else {
            // Test to see if the ball has left
            if (!ballPresentAtExit && ballPresentAtExitPrevious){
                ballArrived = false;
                decrementBallCount();
            }
        }

        ballPresentAtExitPrevious = ballPresentAtExit;
        SmartDashboard.putNumber("drive/Indexed Powercell Count", ballCount());
    }




    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    public boolean ballPresent(int aPort) {
        boolean retValue = false;
        switch (aPort) {
        case 0:
            retValue = !indexAcquiredSensor.get();
            break;
        case 1:
            retValue = !indexSensor.get();
            break;
        case 2:
            retValue = !indexToShootSensor.get();
            break;
        default:
            retValue = false;
            break;
        }
        return retValue;
    }

    public void startIndexMotor(double speed) {
        beltMotor.set(speed);
    }

    public void stopIndexMotor() {
        beltMotor.set(0);
        indexerRunning = false;
    }

    public WPI_TalonSRX getBeltMotor() {
        return beltMotor;
    }

    public int incrementPwrCellCount() {
        return ++indexedBallCount;
    }

    public int decrementBallCount() {
        return --indexedBallCount;
    }

    public int ballCount() {
        return indexedBallCount;
    }

    public void resetCount() {
        indexedBallCount = 0;
    }

    public void reinitializeIndexer() {
        indexerRunning = false;
    }
}
